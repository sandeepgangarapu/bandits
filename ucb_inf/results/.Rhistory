install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"), repos='http://cran.us.r-project.org')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"), repos = "http://cran.us.r-project.org")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
install.packages("cplexAPI")
install.packages("cplexAPI",repos = "http://cran.us.r-project.org")
getOption("repos")
install.packages(c("dplyr","ggplot2","httr","devtools","tidyverse",
"knitr","tidyr","readr","lubridate","readxl","broom",
"memoise","assertthat","microbenchmark",
"pander","purrr","caret","stringr",
"TSA","fpp","forecast","zoo","xts",
"lpSolve",
"sparklyr","versions","checkpoint",
"igraph",
"LearnBayes","MCMCpack",
"VGAM","quantreg","mvtnorm","sandwich"),
dep=TRUE,
repos="https://cran.microsoft.com/snapshot/2016-11-02")
install.packages("tesseract", repos = "http://cran.cnr.berkeley.edu/")
library(tesseract)
tesseract_info()
install.packages("tesseract")
install.packages("tesseract")
a= [1.91,1.74,1.92,1.80,1.90,2.11,2.02,2.11,2.09,2.21,2.14,2.39,2.27,2.43,2.60,2.86,2.68,2.41,3.14,2.92,2.59,2.77,2.34,0.93,0.85,1.00,0.86,0.93,0.99,0.26,0.27,0.27,0.32,0.27,0.27,0.33,0.27,0.27,0.31,0.28,0.27,0.32,0.30,0.30,0.26,0.26,0.27,0.32,0.27,0.27,0.28,0.28,0.29,0.30,0.30,0.28,0.31,0.32,0.32]
a= c(1.91,1.74,1.92,1.80,1.90,2.11,2.02,2.11,2.09,2.21,2.14,2.39,2.27,2.43,2.60,2.86,2.68,2.41,3.14,2.92,2.59,2.77,2.34,0.93,0.85,1.00,0.86,0.93,0.99,0.26,0.27,0.27,0.32,0.27,0.27,0.33,0.27,0.27,0.31,0.28,0.27,0.32,0.30,0.30,0.26,0.26,0.27,0.32,0.27,0.27,0.28,0.28,0.29,0.30,0.30,0.28,0.31,0.32,0.32)
a
mean(a)
std(a)
sd(a)
b = c(202.97,204.43,209.32,208.32,211.41,212.88,208.48,204.65,206.01,206.32,206.81,208.00,208.40,207.42,211.07,208.83,206.34,208.32,207.21,209.93,209.94,212.07,214.10,216.35,215.76,214.89,218.77,216.66,219.39,221.63,217.68,225.83,223.69,229.04,227.39,231.59,227.60,230.36,235.18,230.53,232.54,232.12,235.88,236.47,240.76,240.62,240.53,239.26,207.01,244.94,244.63,247.85,249.42,249.88,248.68,249.35,249.36,251.99,254.64)
mean(b)
sd(b)
sample(1:100, 5)
sample(1:100, 6)
sample(1:100, 6)
sample(1:100, 6)
sample(1:100, 6)
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)}
)
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\MISQ_revision\\BanditSimulation")
df <- read.csv("donor_linucb_cost.csv")
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\MISQ_revision\\Cplex_runtime")
optimization_results <- read.csv("don_optimization_results.csv")
data <- optimization_results
data <- data %>% filter(budget%%2000==0) %>% group_by(budget) %>% summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) %>% ungroup()
df2 <- df %>% filter(optimal==1)%>% group_by(ite) %>% mutate(cumsum_cost = cumsum(cost), cumsum_reward = cumsum(reward)) %>%
mutate(filt_cumcum = floor(cumsum_cost/2000)*2000) %>% select(ite, filt_cumcum, cumsum_reward) %>% group_by(ite, filt_cumcum) %>% summarise(reward = min(cumsum_reward)) %>% filter(filt_cumcum <= 18000 & filt_cumcum > 0) %>% ungroup() %>% select(filt_cumcum, reward) %>% group_by(filt_cumcum) %>% summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) %>% ungroup()
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\MISQ_revision\\BanditSimulation")
ggplot() + geom_line(data=df2, aes(filt_cumcum, mean, colour="LinUCB")) +
geom_ribbon(data=df2, aes(x=filt_cumcum, y=mean, ymin=mean+se*qnorm(0.025),
ymax=mean+se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
geom_line(data=data, aes(budget, greedy_mean, colour="Greedy")) +
geom_ribbon(data=data, aes(x=budget, y=greedy_mean,ymin=greedy_mean+greedy_se*qnorm(0.025), ymax=greedy_mean+greedy_se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
geom_line(data=data, aes(budget, milp_mean, colour="MILP")) +
geom_ribbon(data=data, aes(x=budget, y=milp_mean,ymin=milp_mean+milp_se*qnorm(0.025), ymax=milp_mean+milp_se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
geom_line(data=data, aes(budget, ate_mean, colour="ATE")) +
geom_ribbon(data=data, aes(x=budget, y=ate_mean,ymin=ate_mean+ate_se*qnorm(0.025), ymax=ate_mean+ate_se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
labs(x = "Budget in RMB", y = "Utility in RMB", title ="Graph of Budget Vs. Utility", color='Allocation Methods') +
ggsave("plot_utility.png", width = 8, height = 5)
View(data)
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)}
)
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\code\\applications\\donor\\pre-revision\\reproducible_analysis\\output_30")
main_utility <- read.csv("don_utility.csv")
main_benefit <- read.csv("don_benefit.csv")
main_cost <- read.csv("don_cost.csv")
main_utility_1 <- read.csv("don_utility_1.csv")
main_benefit_1 <- read.csv("don_benefit_1.csv")
main_cost_1 <- read.csv("don_cost_1.csv")
main_utility <- rbind(main_utility, main_utility_1)
main_benefit <- rbind(main_benefit, main_benefit_1)
main_cost <- rbind(main_cost, main_cost_1)
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\code\\applications\\donor\\pre-revision\\reproducible_analysis")
# Overall prediction accuracy (Mean and SD)
a <- main_utility %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(abs(diff))) %>% select(error) %>% summarize(mean(error), sd(error))
b <- main_benefit %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(abs(diff))) %>% select(error) %>% summarize(mean(error), sd(error))
c <- main_cost %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(abs(diff))) %>% select(error) %>% summarize(mean(error), sd(error))
df = rbind(a,b,c)
df$Type = c("utility", "benefit", "cost")
colnames(df) <- c("mean_MAE", "sd_MAE", "Type")
df = df[c("Type", "mean_MAE", "sd_MAE")]
kable(df)
a <- main_utility %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error) %>% summarize(mean(error), sd(error))
b <- main_benefit %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error) %>% summarize(mean(error), sd(error))
c <- main_cost %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error) %>% summarize(mean(error), sd(error))
df = rbind(a,b,c)
df$Type = c("utility", "benefit", "cost")
colnames(df) <- c("mean_MSE", "sd_MSE", "Type")
df = df[c("Type", "mean_MSE", "sd_MSE")]
kable(df)
a <- main_utility %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(diff)) %>% select(error) %>% summarize(mean(error), sd(error))
b <- main_benefit %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(diff)) %>% select(error) %>% summarize(mean(error), sd(error))
c <- main_cost %>% select(predicted_utility, actual_value, iteration) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration) %>%
summarise(error = mean(diff)) %>% select(error) %>% summarize(mean(error), sd(error))
df = rbind(a,b,c)
df$Type = c("utility", "benefit", "cost")
colnames(df) <- c("mean_ME", "sd_ME", "Type")
df = df[c("Type", "mean_ME", "sd_ME")]
kable(df)
# Overall prediction accuracy (Mean and SD)
a <- main_utility %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
b <- main_benefit %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
c <- main_cost %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
df = rbind(a,b,c)
df$Type = c("utility","benefit","cost")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Type/Mean")
df = df[c("Type/Mean", "Control", "Treatment_1", "Treatment_2")]
kable(df)
a <- main_utility %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
b <- main_benefit %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
c <- main_cost %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
df = rbind(a,b,c)
df$Type = c("utility","benefit","cost")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Type/Standard Deviation")
df = df[c("Type/Standard Deviation", "Control", "Treatment_1", "Treatment_2")]
kable(df)
# Overall prediction accuracy (Mean and SD)
a <- main_utility %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
b <- main_benefit %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
c <- main_cost %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
df = rbind(a,b,c)
df$Type = c("utility","benefit","cost")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Type/Mean")
df = df[c("Type/Mean", "Control", "Treatment_1", "Treatment_2")]
kable(df)
a <- main_utility %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
b <- main_benefit %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
c <- main_cost %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean(abs(diff)^2)) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
df = rbind(a,b,c)
df$Type = c("utility","benefit","cost")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Type/Standard Deviation")
df = df[c("Type/Standard Deviation", "Control", "Treatment_1", "Treatment_2")]
kable(df)
# Overall prediction accuracy (Mean and SD)
a <- main_utility %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean((diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
b <- main_benefit %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean((diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
c <- main_cost %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean((diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(me = mean(error)) %>%
spread(actual_group, me)
df = rbind(a,b,c)
df$Type = c("utility","benefit","cost")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Type/Mean")
df = df[c("Type/Mean", "Control", "Treatment_1", "Treatment_2")]
kable(df)
a <- main_utility %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean((diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
b <- main_benefit %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean((diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
c <- main_cost %>% select(predicted_utility, actual_value, iteration, actual_group) %>%
mutate(diff = actual_value - predicted_utility) %>% group_by(iteration, actual_group) %>%
summarise(error = mean((diff))) %>% select(error, actual_group) %>% group_by(actual_group) %>% summarize(sd = sd(error)) %>%
spread(actual_group, sd)
df = rbind(a,b,c)
df$Type = c("utility","benefit","cost")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Type/Standard Deviation")
df = df[c("Type/Standard Deviation", "Control", "Treatment_1", "Treatment_2")]
kable(df)
# Average actual Vs. optimal utility per group
a <- main_utility %>% select(iteration, actual_group, actual_value, first) %>% group_by(iteration, actual_group) %>%
summarise(m_actual_utility = mean(actual_value), m_optimal_utility = mean(first)) %>%
ungroup() %>% group_by(actual_group) %>%
summarise(mean_actual_utility = mean(m_actual_utility), mean_optimal_utility = mean(m_optimal_utility),
sd_actual_utility = sd(m_actual_utility), sd_optimal_utility = sd(m_optimal_utility))
kable(a)
a <- main_utility %>% select(iteration, actual_group, actual_value, first) %>% group_by(iteration, actual_group) %>%
summarise(m_actual_utility = mean(actual_value), m_optimal_utility = mean(first)) %>%
ungroup() %>% group_by(actual_group) %>%
summarise(mean_actual_utility = mean(m_actual_utility), mean_optimal_utility = mean(m_optimal_utility)) %>%
gather(utility_type, utility, mean_actual_utility: mean_optimal_utility)
b <- main_utility %>% select(iteration, actual_group, actual_value, first) %>% group_by(iteration, actual_group) %>%
summarise(m_actual_utility = mean(actual_value), m_optimal_utility = mean(first)) %>%
ungroup() %>% group_by(actual_group) %>%
summarise(se_actual_utility = sd(m_actual_utility)/sqrt(n()), se_optimal_utility = sd(m_optimal_utility)/sqrt(n())) %>%
gather(utility_type, utility, se_actual_utility: se_optimal_utility)
a["se"] = b$utility
ggplot(a,aes(actual_group,utility,fill=utility_type))+
geom_bar(stat="identity",position="dodge")+
geom_errorbar(aes(ymin=utility+se*qnorm(0.025), ymax=utility+se*qnorm(0.975)),width=.2,position=position_dodge(.9)) +
labs(x = "Treatment_group", y = "Utility in RMB", title ="Graph of Average Actual Utility and Average Predicted Optimal Utility (CI)")
# Average actual Vs. optimal utility per group
a <- main_utility %>% select(iteration, actual_value, first) %>% group_by(iteration) %>%
summarise(m_actual_utility = mean(actual_value), m_optimal_utility = mean(first)) %>%
ungroup() %>%
summarise(mean_actual_utility = mean(m_actual_utility), mean_optimal_utility = mean(m_optimal_utility),
sd_actual_utility = sd(m_actual_utility), sd_optimal_utility = sd(m_optimal_utility))
kable(a)
a <- main_utility %>% select(iteration, actual_value, first) %>% group_by(iteration) %>%
summarise(m_actual_utility = mean(actual_value), m_optimal_utility = mean(first)) %>%
ungroup() %>%
summarise(mean_actual_utility = mean(m_actual_utility), mean_optimal_utility = mean(m_optimal_utility)) %>%
gather(utility_type, utility, mean_actual_utility: mean_optimal_utility)
b <- main_utility %>% select(iteration, actual_value, first) %>% group_by(iteration) %>%
summarise(m_actual_utility = mean(actual_value), m_optimal_utility = mean(first)) %>%
ungroup() %>%
summarise(se_actual_utility = sd(m_actual_utility)/sqrt(n()), se_optimal_utility = sd(m_optimal_utility)/sqrt(n())) %>%
gather(utility_type, utility, se_actual_utility: se_optimal_utility)
a["se"] = b$utility
ggplot(a,aes(utility_type,utility))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=utility+se*qnorm(0.025), ymax=utility+se*qnorm(0.975)),width=.2,position=position_dodge(.9)) +
labs(x = "Treatment_group", y = "Utility in RMB", title ="Graph of Average Actual Utility and Average Predicted Optimal Utility overall (CI)")
a <- main_utility %>% filter(iteration==1) %>% select(actual_group) %>% group_by(actual_group) %>% summarise(cnt = n()) %>%
spread(actual_group, cnt)
b <- main_utility %>% filter(iteration==1) %>% select(first_index) %>% group_by(first_index) %>% summarise(cnt = n()) %>%
spread(first_index, cnt)
c <- main_utility %>% filter(iteration==1) %>% select(actual_group, first_index) %>% group_by(actual_group, first_index) %>% summarise(cnt = n())
kable(c)
df = rbind(a,b)
df$Allocation_Type = c("Actual_allocation","Optimal_allocation")
colnames(df) <- c( "Control", "Treatment_1", "Treatment_2", "Allocation_Type")
df = df[c("Allocation_Type", "Control", "Treatment_1", "Treatment_2")]
kable(df)
# Average actual Vs. optimal utility per group
b <- train_utility %>% select(iteration, actual_group, actual_value) %>% group_by(iteration, actual_group) %>%
summarise(m_actual_utilty = mean(actual_value)) %>% group_by(actual_group) %>% summarise(mean_actual_utilty = mean(m_actual_utilty))
a <-main_utility %>% select(iteration, actual_group, first_index, second_index, third_index, actual_value) %>%
mutate(allocation = ifelse(first_index == actual_group, "First", ifelse(second_index==actual_group, "Second", "Third"))) %>%
group_by(iteration, allocation) %>% summarise(mav = mean(actual_value)) %>% group_by(allocation) %>% summarise(mean_av = mean(mav), se = sd(mav)/sqrt(n()))
ggplot(a,aes(allocation,mean_av))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=mean_av+se*qnorm(0.025), ymax=mean_av+se*qnorm(0.975)),width=.2,position=position_dodge(.9)) + theme_bw() +
labs(x = "Rank of Treatment Group", y = "Utility (RMB)")+ggsave("our-blood-30.png", width = 8, height = 5)
a <-main_utility %>% select(iteration, actual_group, first_index, second_index, third_index, actual_value) %>%
mutate(allocation = ifelse(first_index == actual_group, "first", ifelse(second_index==actual_group, "second", "third"))) %>%
group_by(iteration, actual_group, allocation) %>% summarise(mav = mean(actual_value)) %>% ungroup() %>%
group_by(actual_group, allocation) %>% summarise(mean_av = mean(mav), se = sd(mav)/sqrt(n()))
ggplot(a,aes(actual_group,mean_av,fill=allocation))+
geom_bar(stat="identity",position="dodge")+
geom_errorbar(aes(ymin=mean_av+se*qnorm(0.025), ymax=mean_av+se*qnorm(0.975)),width=.2,position=position_dodge(.9)) +
labs(x = "Rank of treatment group", y = "Utility (RMB)", title ="Average actual utility")
a <- rnorm(10,1)
?rnomrm
?rnorm
library(ggplot)
library(ggplot2)
a <- rnorm(10,1,2)
hist(a)
a <- rnorm(1000,1,2)
hist(a)
ggplot() + geom_histogram(a)
ggplot() + geom_histogram(aex(x=a))
ggplot() + geom_histogram(aes(x=a))
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=10, sd=3)
plot(x, y, type="l", lwd=1)
x <- seq(1, 15, length=1000)
y <- dnorm(x, mean=10, sd=3)
plot(x, y, type="l", lwd=1)
a <- rnorm(10000,1,2)
ggplot() + geom_histogram(aes(x=a))
a <- rnorm(100000,1,2)
ggplot() + geom_histogram(aes(x=a))
?geom_histogram
ggplot() + geom_density(aes(x=a),)
ggplot() + geom_density(aes(x=a))
a <- rnorm(1000000,1,2)
ggplot() + geom_density(aes(x=a))
x <- seq(5, 15, length=1000)
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=10, sd=3)
plot(x, y, type="l", lwd=1)
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=10, sd=2)
plot(x, y, type="l", lwd=1)
z <- dnorm(x, mean=11, sd=3)
plot(x, z, type="l", lwd=1)
ggplot() + geom_density(aes(x=a))
a <- rnorm(1000000,1,2)
ggplot() + geom_density(aes(x=a))
a <- rnorm(1000000,1,2)
b <- rnorm(1000000,2,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b))
a <- rnorm(1000000,1,2)
b <- rnorm(1000000,2,3)
c <- rnorm(1000000,0,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
x <- seq(5, 15, length=1000)
a <- rnorm(1000000,1,2)
b <- rnorm(1000000,2,3)
c <- rnorm(1000000,0,4)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
a <- rnorm(1000000,1,2)
b <- rnorm(1000000,2,4)
c <- rnorm(1000000,0,5)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
std.error(a[:3])
std.error(a[,3])
std.error(a[c(1,3)])
se(a[c(1,3)])
a <- rnorm(1000000,11,2)
b <- rnorm(1000000,12,4)
c <- rnorm(1000000,10,5)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
(a[c(1,3)])
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
c <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
a[c(1,3)]
mean(a[c(1,4)])
mean(a[c(1,4)])
mean(b[c(1,4)])
mean(c[c(1,4)])
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
c <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1,4)])
mean(b[c(1,4)])
mean(c[c(1,4)])
set.seed(100)
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
c <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1,4)])
mean(b[c(1,4)])
mean(c[c(1,4)])
mean(b[c(5,15)])
sum(b[c(5,15)])
b[c(5,15)]
(b[c(1,4)])
c(1,10)
mean(a[c(1,4)])
a[c(1,4)]
mean(a[c(1:4)])
a[c(1:4)]
set.seed(100)
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
d <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1:3)])
mean(b[c(1:3)])
mean(d[c(1:3)])
sum(b[c(5:15)])
set.seed(1000)
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
d <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1:3)])
mean(b[c(1:3)])
mean(d[c(1:3)])
sum(b[c(5:15)])
set.seed(10080)
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
d <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1:3)])
mean(b[c(1:3)])
mean(d[c(1:3)])
sum(b[c(5:15)])
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
d <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1:3)])
mean(b[c(1:3)])
mean(d[c(1:3)])
sum(b[c(5:15)])
set.seed(120080)
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
d <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1:3)])
mean(b[c(1:3)])
mean(d[c(1:3)])
sum(b[c(5:15)])
set.seed(1120080)
a <- rnorm(1000000,11,1)
b <- rnorm(1000000,12,2)
d <- rnorm(1000000,10,3)
ggplot() + geom_density(aes(x=a)) + geom_density(aes(x=b)) + geom_density(aes(x=c))
mean(a[c(1:3)])
mean(b[c(1:3)])
mean(d[c(1:3)])
sum(b[c(5:15)])
sum(c(a[c(1:3)], b[c(1:3)], d[c(1:3)]))
sum(d[c(5:15)])
d[c(5:15)]
install.packages("ggplot2")
install.packages("installr")
installr::installr()
library(ggplot2)
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
library(ggplot2)
library(dplyr)
library(tidyr)
group_outcome <- read.csv("group_outcome.csv") %>% filter(type!='eps')  %>%
group_by(ite,type) %>% mutate(x=row_number()) %>%
ungroup()
setwd("G:\\My Drive\\Research\\Bandits\\code\\bandits\\ucb_inf\\results")
library(ggplot2)
library(dplyr)
library(tidyr)
group_outcome <- read.csv("group_outcome_sim.csv") %>% filter(type!='eps')  %>%
group_by(ite,type) %>% mutate(x=row_number()) %>%
ungroup()
group_outcome <- read.csv("group_outcome_sim.csv") %>% filter(type!='eps')  %>%
group_by(ite,type) %>% mutate(x=row_number()) %>%
ungroup()
group_outcome <- read.csv("group_outcome_sim.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>%
ungroup()
regret_mse <- read.csv("regret_mse.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()  %>%
ungroup()
df <- group_outcome %>% filter(ite==0)
df <- group_outcome %>% filter(ite==0)
ggplot(df) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) + facet_grid(type ~.) + theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = 6)) +   theme(axis.text.y = element_text(size = rel(1)))
ggplot(df) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) + facet_grid(alg ~.) + theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = 6)) +   theme(axis.text.y = element_text(size = rel(1)))
View(regret_mse)
regret_mse <- read.csv("regret_mse.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>% ungroup()  %>%
ungroup()
group_outcome <- read.csv("group_outcome_sim.csv") %>%
group_by(ite,alg) %>% mutate(x=row_number()) %>%
ungroup()
df <- group_outcome %>% filter(ite==0)
ggplot(df) + geom_point(aes(x=x, y=factor(group)), shape=1, alpha=0.6) + facet_grid(alg ~.) + theme_bw() +
labs(x='Time Period', y = 'Group') +
theme(axis.text.y = element_text(size = 6)) +   theme(axis.text.y = element_text(size = rel(1)))
View(regret_mse)
regret_mse <- read.csv("regret_mse.csv")
View(regret_mse)
