egoistic_placeholder <- '2'
equitable_placeholder <- '3'
altruistic_placeholder <- '4'
library(knitr)
alt_nr_output <- read.csv('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\alt_nr_output.csv')
kable(alt_nr_output)
kable(alt_nr_output)
print(alt_nr_output$path[1])
grapher(collage_data, alt_nr_output$path[1])
View(grapher)
View(grapher)
View(grapher)
View(grapher)
View(grapher)
View(dummy)
View(dummy)
library(knitr)
setwd('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\git_code\\hte')
source('berry_function.R')
collage_data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\collage_treatment_effect.csv')
control_placeholder <- '1'
egoistic_placeholder <- '2'
equitable_placeholder <- '3'
altruistic_placeholder <- '4'
alt_nr_output <- berry2s(
data = collage_data,
control_group_placeholder = control_placeholder,
treatment_group_placeholder = altruistic_placeholder,
treatment_variable = "cell",
target_variable = "number_referrals",
covariates = c("satisfied","NPS","lastday_purchase_all","num_purchase_all","money_spend_all","survey"),
covariate_factors = c("cell","satisfied","survey"))
library(knitr)
kable(alt_nr_output)
print(alt_nr_output$path[1])
grapher(collage_data, alt_nr_output$path[1])
print(alt_nr_output$path[length(alt_nr_output$path)])
grapher(collage_data, alt_nr_output$path[length(alt_nr_output$path)])
equi_nr_output <- berry2s(
data = collage_data,
control_group_placeholder = control_placeholder,
treatment_group_placeholder = equitable_placeholder,
treatment_variable = "cell",
target_variable = "number_referrals",
covariates = c("satisfied","NPS","lastday_purchase_all","num_purchase_all","money_spend_all","survey"),
covariate_factors = c("cell","satisfied","survey"))
kable(equi_nr_output)
print(equi_nr_output$path[1])
grapher(collage_data, equi_nr_output$path[1])
print(equi_nr_output$path[length(equi_nr_output$path)])
grapher(collage_data, equi_nr_output$path[length(equi_nr_output$path)])
write.csv(alt_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\alt_nr_output.csv', row.names = FALSE)
write.csv(ego_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\ego_nr_output.csv', row.names = FALSE)
write.csv(equi_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\equi_nr_output.csv', row.names = FALSE)
athey_equi_nr_output <- athey(
data = collage_data,
control_group_placeholder = control_placeholder,
treatment_group_placeholder = equitable_placeholder,
treatment_variable = "cell",
target_variable = "number_referrals",
covariates = c("satisfied","NPS","lastday_purchase_all","num_purchase_all","money_spend_all","survey"),
covariate_factors = c("satisfied","survey"))
setwd('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\git_code\\hte')
source('athey_function.R')
collage_data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\collage_treatment_effect.csv')
control_placeholder <- 1
egoistic_placeholder <- 2
equitable_placeholder <- 3
altruistic_placeholder <- 4
athey_equi_nr_output <- athey(
data = collage_data,
control_group_placeholder = control_placeholder,
treatment_group_placeholder = equitable_placeholder,
treatment_variable = "cell",
target_variable = "number_referrals",
covariates = c("satisfied","NPS","lastday_purchase_all","num_purchase_all","money_spend_all","survey"),
covariate_factors = c("satisfied","survey"))
kable(athey_equi_nr_output)
write.csv(athey_alt_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\athey_alt_nr_output.csv', row.names = FALSE)
athey_alt_nr_output <- athey(
data = collage_data,
control_group_placeholder = control_placeholder,
treatment_group_placeholder = altruistic_placeholder,
treatment_variable = "cell",
target_variable = "number_referrals",
covariates = c("satisfied","NPS","lastday_purchase_all","num_purchase_all","money_spend_all","survey"),
covariate_factors = c("satisfied","survey"))
library(knitr)
kable(athey_alt_nr_output)
print(athey_alt_nr_output$path[1])
grapher(collage_data, athey_alt_nr_output$path[1])
print(athey_alt_nr_output$path[length(athey_alt_nr_output$path)])
grapher(collage_data, athey_alt_nr_output$path[length(athey_alt_nr_output$path)])
write.csv(athey_alt_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\athey_alt_nr_output.csv', row.names = FALSE)
write.csv(athey_alt_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\athey_alt_nr_output.csv', row.names = FALSE)
write.csv(athey_equi_nr_output, 'C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\athey_equi_nr_output.csv', row.names = FALSE)
suppressPackageStartupMessages({library(knitr)
library(ggplot2)})
setwd('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\git_code\\hte')
source('athey_function.R')
collage_data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Ed Research\\Heterogenous treatment effects\\collage_treatment_effect.csv')
control_placeholder <- 1
egoistic_placeholder <- 2
equitable_placeholder <- 3
altruistic_placeholder <- 4
collage_data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Personal\\Devleena\\data.csv')
data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Personal\\Devleena\\data.csv')
summary(data)
colnames(data)
library(dplyr)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics))
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics))
library(dplyr)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics))
data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Personal\\Devleena\\data.csv')
summary(data)
colnames(data)
library(dplyr)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics))
str(data)
head(data)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics)) %>% filter(Q1 == "{\"ImportId\":\"QID1\"}")
data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Personal\\Devleena\\data.csv')
summary(data)
colnames(data)
library(dplyr)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics)) %>% filter(Q1 == "{\"ImportId\":\"QID1\"}")
str(data)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics)) %>% filter(Q1 != "{\"ImportId\":\"QID1\"}")
data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Personal\\Devleena\\data.csv')
summary(data)
colnames(data)
library(dplyr)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics)) %>% filter(Q1 != "{\"ImportId\":\"QID1\"}")
str(data)
View(data)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics))
str(data)
head(data$Q)
data <- read.csv('C:\\Users\\ganga020\\Google Drive\\Personal\\Devleena\\data.csv')
summary(data)
colnames(data)
library(dplyr)
str(data)
data <- data %>% select(-c(Q6_4_TEXT,Q6_4_TEXT...Topics))
head(data$Q)
View(data)
data <- data %>% mutate(Q7_1_change = ifelse("Strongly Agree",5,ifelse("Agree",4,ifelse("No Opinion",1,ifelse("Disagree",3,ifelse("Strongly Disagree",2,0))))))
summary(data$Q7_1)
head(data$Q7_1)
typeof(data$Q7_1)
data[,"Q7_1"]
data[,"Q7_1"][1]
data[,"Q7_1"][3]
data[,"Q7_1"][3] == "Strongly Agree"
data <- data %>% mutate(Q7_1_change = ifelse(Q7_1=="Strongly Agree",5,ifelse(Q7_1=="Agree",4,ifelse(Q7_1=="No Opinion",1,ifelse(Q7_1=="Disagree",3,ifelse(Q7_1=="Strongly Disagree",2,0))))))
data <- data %>% mutate(Q7_1_change = ifelse(Q7_1=="Strongly Agree",5,ifelse(Q7_1=="Agree",4,ifelse(Q7_1=="No Opinion",1,ifelse(Q7_1=="Disagree",3,ifelse(Q7_1=="Strongly Disagree",2,NA))))))
mean(data$Q7_1_change)
mean(data$Q7_1_change)
head(data$Q7_1_change)
source('C:/Users/ganga020/Google Drive/Personal/Devleena/analysis.R', echo=TRUE)
mean(data$Q7_1_change)
median(data$Q7_1_change)
mean(c(NA,1,2))
mean(c(1,2))
median(data$Q7_1_change, is.na=FALSE)
median(data$Q7_1_change)
data %>% filter(Q1 == "Male")
data %>% filter(Q1 == "Male") %>% group_by(Q7_1) %>% summarise(count())
data %>% filter(Q1 == "Male") %>% group_by(Q7_1) %>% summarise(count(n))
data %>% filter(Q1 == "Male") %>% group_by(Q7_1) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% group_by(as.factor(Q7_1)) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% as.factor(Q7_1) %>% group_by(Q7_1) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% as.factor(Q7_1) %>% group_by(Q7_1) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% mutate(Q7_1=factor(Q7_1)) %>% group_by(Q7_1) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% mutate(Q7_1=factor(Q7_1)) %>% group_by(Q7_1) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% group_by(Q7_1) %>% summarise(count(Q7_1))
data %>% filter(Q1 == "Male") %>% group_by(Q7_1) %>% summarise(n())
data %>% filter(Q1 == "Female") %>% group_by(Q7_1) %>% summarise(n())
data %>% filter(Q1 == "Female") %>% group_by(Q7_1) %>% summarise(n()/n)
sample(1:10, 4)
sample(1:10, 4)
runif(10)
rlaplace(1)
?rlaplace
??rlaplace
install.packages("VGAM")
library(VGAM)
rlaplace(1)
runif(10)
save.image("~/.Rhistory.RData")
#install.packages(c("httr", "jsonlite", "lubridate"))
library(httr)
library(jsonlite)
library(lubridate)
library(anytime)
#https://www.r-bloggers.com/accessing-apis-from-r-and-a-little-r-programming/
url = 'https://api.darksky.net/'
path = 'forecast/0b8be987bb7ef08a81be0ad840eb043e/44.9778,-93.2650'
raw.result <- GET(url = url, path = path)
raw.result$content
this.raw.content <- rawToChar(raw.result$content)
this.content <- fromJSON(this.raw.content)
this.content$currently$temperature
this.content$currently$apparentTemperature
this.content$currently$windSpeed
names(this.content$currently)
names(this.content$hourly)
this.content$daily$data$time <- anydate(this.content$daily$data$time)
this.content$daily$data
install.packages('anytime')
raw.result$content
this.raw.content <- rawToChar(raw.result$content)
this.content <- fromJSON(this.raw.content)
this.content
names(this.content)
names(this.content)
names(this.content$currently)
names(this.content$hourly)
names(this.content$daily)
this.content$daily
this.content$hourly
this.content$daily$data$time <- anydate(this.content$daily$data$time)
install.packages('anytime')
this.content$daily$data$time <- anydate(as.POSIXct(this.content$daily$data$time, origin="1970-01-01"))
this.content$daily$data$time <- as.POSIXct(this.content$daily$data$time, origin="1970-01-01")
this.content$daily$data$time
this.content$hourly$data$time <- as.POSIXct(this.content$daily$data$time, origin="1970-01-01")
this.content$hourly$data$time <- as.POSIXct(this.content$hourly$data$time, origin="1970-01-01")
this.content$hourly$data$time
this.content$hourly$data
install.packages("Rcplex")
y
y
install.packages("Rcplex")
library(Rcplex)
install.packages("cplexAPI")
R CMD build --no-build-vignettes --no-manual  --md5     C:\Users\ganga020\Desktop\cplexAPI
library(cplexAPI)
R CMD check --help
R CMD INSTALL --help
R CMD INSTALL --help
R CMD INSTALL --help
R CMD check --help
PATH: C:\Program Files\R\R-2.15.1\bin\x64;C:\Rtools\bin;C:\Rtools\gcc-4.6.3\bin
R CMD INSTALL --help
R CMD check --help
library(rtools)
find.package("devtools")
find_rtools()
library(devtools)
find_rtools()
find_rtools()
R CMD check --help
R CMD check --help
R CMD check --help
library(cplexAPI)
library(cplexAPI)
library(cplexAPI)
R CMD check --help
.libPaths()
library(cplexAPI)
library(crayon)
library(cplexAPI)
library(cplexAPI)
library(cplexAPI)
library(cplexAPI)
install.packages("cplexAPI")
y
y
install.packages("cplexAPI")
library(cplexAPI)
R cmdscale()
R CMD install
CMD install
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"), repos='http://cran.us.r-project.org')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"), repos = "http://cran.us.r-project.org")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
install.packages("cplexAPI")
install.packages("cplexAPI",repos = "http://cran.us.r-project.org")
getOption("repos")
install.packages(c("dplyr","ggplot2","httr","devtools","tidyverse",
"knitr","tidyr","readr","lubridate","readxl","broom",
"memoise","assertthat","microbenchmark",
"pander","purrr","caret","stringr",
"TSA","fpp","forecast","zoo","xts",
"lpSolve",
"sparklyr","versions","checkpoint",
"igraph",
"LearnBayes","MCMCpack",
"VGAM","quantreg","mvtnorm","sandwich"),
dep=TRUE,
repos="https://cran.microsoft.com/snapshot/2016-11-02")
install.packages("tesseract", repos = "http://cran.cnr.berkeley.edu/")
library(tesseract)
tesseract_info()
install.packages("tesseract")
install.packages("tesseract")
a= [1.91,1.74,1.92,1.80,1.90,2.11,2.02,2.11,2.09,2.21,2.14,2.39,2.27,2.43,2.60,2.86,2.68,2.41,3.14,2.92,2.59,2.77,2.34,0.93,0.85,1.00,0.86,0.93,0.99,0.26,0.27,0.27,0.32,0.27,0.27,0.33,0.27,0.27,0.31,0.28,0.27,0.32,0.30,0.30,0.26,0.26,0.27,0.32,0.27,0.27,0.28,0.28,0.29,0.30,0.30,0.28,0.31,0.32,0.32]
a= c(1.91,1.74,1.92,1.80,1.90,2.11,2.02,2.11,2.09,2.21,2.14,2.39,2.27,2.43,2.60,2.86,2.68,2.41,3.14,2.92,2.59,2.77,2.34,0.93,0.85,1.00,0.86,0.93,0.99,0.26,0.27,0.27,0.32,0.27,0.27,0.33,0.27,0.27,0.31,0.28,0.27,0.32,0.30,0.30,0.26,0.26,0.27,0.32,0.27,0.27,0.28,0.28,0.29,0.30,0.30,0.28,0.31,0.32,0.32)
a
mean(a)
std(a)
sd(a)
b = c(202.97,204.43,209.32,208.32,211.41,212.88,208.48,204.65,206.01,206.32,206.81,208.00,208.40,207.42,211.07,208.83,206.34,208.32,207.21,209.93,209.94,212.07,214.10,216.35,215.76,214.89,218.77,216.66,219.39,221.63,217.68,225.83,223.69,229.04,227.39,231.59,227.60,230.36,235.18,230.53,232.54,232.12,235.88,236.47,240.76,240.62,240.53,239.26,207.01,244.94,244.63,247.85,249.42,249.88,248.68,249.35,249.36,251.99,254.64)
mean(b)
sd(b)
sample(1:100, 5)
sample(1:100, 6)
sample(1:100, 6)
sample(1:100, 6)
sample(1:100, 6)
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)}
)
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\MISQ_revision\\BanditSimulation")
df <- read.csv("donor_linucb_cost.csv")
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\MISQ_revision\\Cplex_runtime")
optimization_results <- read.csv("don_optimization_results.csv")
data <- optimization_results
data <- data %>% filter(budget%%2000==0) %>% group_by(budget) %>% summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) %>% ungroup()
df2 <- df %>% filter(optimal==1)%>% group_by(ite) %>% mutate(cumsum_cost = cumsum(cost), cumsum_reward = cumsum(reward)) %>%
mutate(filt_cumcum = floor(cumsum_cost/2000)*2000) %>% select(ite, filt_cumcum, cumsum_reward) %>% group_by(ite, filt_cumcum) %>% summarise(reward = min(cumsum_reward)) %>% filter(filt_cumcum <= 18000 & filt_cumcum > 0) %>% ungroup() %>% select(filt_cumcum, reward) %>% group_by(filt_cumcum) %>% summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) %>% ungroup()
setwd("G:\\My Drive\\Ed Research\\optimal-hte\\MISQ_revision\\BanditSimulation")
ggplot() + geom_line(data=df2, aes(filt_cumcum, mean, colour="LinUCB")) +
geom_ribbon(data=df2, aes(x=filt_cumcum, y=mean, ymin=mean+se*qnorm(0.025),
ymax=mean+se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
geom_line(data=data, aes(budget, greedy_mean, colour="Greedy")) +
geom_ribbon(data=data, aes(x=budget, y=greedy_mean,ymin=greedy_mean+greedy_se*qnorm(0.025), ymax=greedy_mean+greedy_se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
geom_line(data=data, aes(budget, milp_mean, colour="MILP")) +
geom_ribbon(data=data, aes(x=budget, y=milp_mean,ymin=milp_mean+milp_se*qnorm(0.025), ymax=milp_mean+milp_se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
geom_line(data=data, aes(budget, ate_mean, colour="ATE")) +
geom_ribbon(data=data, aes(x=budget, y=ate_mean,ymin=ate_mean+ate_se*qnorm(0.025), ymax=ate_mean+ate_se*qnorm(0.975)), alpha=0.2, fill = "grey70") +
labs(x = "Budget in RMB", y = "Utility in RMB", title ="Graph of Budget Vs. Utility", color='Allocation Methods') +
ggsave("plot_utility.png", width = 8, height = 5)
View(data)
set.seed(6124021266)
set.seed(123)
male <- sample(0:1, n_rows, replace = TRUE)
# setting seed for replicability
set.seed(123)
num_arms <- 3             #NUmber of treatments = 2
n_rows <- 1000            # number of subjects
male <- sample(0:1, n_rows, replace = TRUE)
?rnorm
?rep
y_0 = rep(0, n_rows)
age <- rnorm(n_rows, 30, 20)
y_0 = rep(0, n_rows)
rnorm(1,3,1)
tau_1=c()
for (i in male) {
if (i==1) {
tau_1 <- c(tau_1, rnorm(1, 3, 1))
}  else {
tau_1 <- c(tau_1, rnorm(1, -1, 1))
}
}
y_1 = y_0 + tau_1
# setting seed for replicability
set.seed(123)
num_arms <- 3             #NUmber of treatments = 2
n_rows <- 1000            # number of subjects
# covariates
male <- sample(0:1, n_rows, replace = TRUE)
age <- rnorm(n_rows, 30, 20)
# control group outome is set to 0 for now. So we can just play with treatment effects
y_0 = rep(0, n_rows)
tau_1=c()
for (i in male) {
if (i==1) {
tau_1 <- c(tau_1, rnorm(1, 3, 1))
}  else {
tau_1 <- c(tau_1, rnorm(1, -1, 1))
}
}
tau_2=c()
for (i in male) {
if (i==1) {
tau_1 <- c(tau_1, rnorm(1, 1, 3))
}  else {
tau_1 <- c(tau_1, rnorm(1, 5, 2))
}
}
y_2 = y_0 + tau_2
# Checking distributions
hist(y_0)
hist(y_1)
hist(y_2)
hist(y_2)
y_2 = y_0 + tau_2
tau_2=c()
for (i in male) {
if (i==1) {
tau_1 <- c(tau_1, rnorm(1, 1, 3))
}  else {
tau_1 <- c(tau_1, rnorm(1, 5, 2))
}
}
tau_2=c()
for (i in male) {
if (i==1) {
tau_2 <- c(tau_2, rnorm(1, 1, 3))
}  else {
tau_2 <- c(tau_2, rnorm(1, 5, 2))
}
}
y_2 = y_0 + tau_2
# Checking distributions
hist(y_0)
hist(y_1)
hist(y_2)
hist(y_2)
# control group outome is set to 0 for now. So we can just play with treatment effects
y_0 = rnorm(n_rows, 0, 1)
# control group outome is set to normal for now. So we can just play with treatment effects
y_0 = rnorm(n_rows, 0, 1)
tau_1=c()
for (i in male) {
if (i==1) {
tau_1 <- c(tau_1, rnorm(1, 3, 1))
}  else {
tau_1 <- c(tau_1, rnorm(1, -1, 1))
}
}
tau_2=c()
for (i in male) {
if (i==1) {
tau_2 <- c(tau_2, rnorm(1, 1, 3))
}  else {
tau_2 <- c(tau_2, rnorm(1, 5, 2))
}
}
y_2 = y_0 + tau_2
# Checking distributions
hist(y_0)
hist(y_1)
# Checking distributions
hist(y_0)
hist(y_1)
hist(y_2)
# Checking normality of
shapiro.test(y_0)
shapiro.test(y_1)
shapiro.test(y_2)
# mann-whitney test to check between hetrogeneity
wilcox.test(y_1, y_0)
wilcox.test(y_2, y_0)
wilcox.test(y_2, y_1)
# flinger test to check variance difference
fligner.test(y_1, y_0)
?fligner.test
# mann-whitney test to check between hetrogeneity
# null hypothesis is that both are same
wilcox.test(y_1, y_0) # not same
t.test(y_1, y_0)
t.test(y_1, y_2)
t.test(y_1, y_0)
t.test(y_2, y_0)
# flinger test to check variance difference
fligner.test(y_1, y_0)
fligner.test(y_1, y_2)
fligner.test(y_2, y_0)
source("distributions.R")
source("distributions.R")
setwd(ced)
setwd(cwd)
cwd
setwd(cwd)
setwd(cwd)
setwd(cwd)
source("distributions.R")
setwd(cwd)
setwd(cwd)
setwd(getwd)
setwd(getwd())
source("distributions.R")
getwd()
setwd("G:\\My Drive\\Research\\Contextual Bandits\\code\\bandits\\r_simulations")
source("distributions.R")
y_0
setwd("G:\\My Drive\\Research\\Contextual Bandits\\code\\bandits\\r_simulations")
source("distributions.R")
y_0
setwd("G:\\My Drive\\Research\\Contextual Bandits\\code\\bandits\\r_simulations")
source("distributions.R")
y_1
mean(y_0)
mean(y_1)
mean(y_2)
library(prw)
library(pwr)
install.packages("pwr")
library(pwr)
?pwr.t.test
pwr.t.test(d=1, type = "two.sample", alternative = "greater")
pwr.t.test(d=1, type = "two.sample", alternative = "greater", power = 0.8)
# just need 13 samples for y_1
pwr.t.test(d=3, type = "two.sample", alternative = "greater", power = 0.8)
